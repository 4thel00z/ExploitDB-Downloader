package org.ransomwarezz.ui;

import com.vaadin.ui.*;
import org.jsoup.helper.StringUtil;
import org.ransomwarezz.entities.BinaryExploit;
import org.ransomwarezz.entities.Exploit;
import org.ransomwarezz.managers.ExploitDetailsManager;
import org.ransomwarezz.services.BinaryExploitServiceImpl;
import org.ransomwarezz.services.ExploitServiceImpl;
import org.ransomwarezz.ui.behaviours.RenderListenable;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Queue;
import java.util.concurrent.Callable;
import java.util.concurrent.ConcurrentLinkedQueue;

/**
 * Created by moe on 12/07/17.
 */
public class ExploitDashboard implements RenderListenable<Void> {

    private ExploitDetailsPane exploitDetailsPane = new ExploitDetailsPane("", new ArrayList<>());
    private SearchPane<Exploit> exploitSearchPane;
    private DownloadResultPane downloadResultPane = new DownloadResultPane();
    private Grid<Exploit> exploitGrid = new Grid<>(Exploit.class);
    private VerticalLayout container;

    private Queue<Callable<Void>> preRenderListeneres = new ConcurrentLinkedQueue<>();
    private Queue<Callable<Void>> postRenderListeneres = new ConcurrentLinkedQueue<>();


    public ExploitDashboard() {
        try {
            this.exploitSearchPane = new SearchPane<>("1. Exploit Informations", exploitGrid, ExploitServiceImpl.getAllExploits());
            setup();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void setup() {
        setupContainer();
        setupExploitDetailsPane();
        setupExploitSearchPane();
        setupDownloadResultPane();
    }

    private void setupDownloadResultPane() {
        downloadResultPane.hide();
    }

    private void setupContainer() {
        if (container != null) {
            container.setWidth("100%");
            container.setComponentAlignment(exploitDetailsPane.render(), Alignment.BOTTOM_RIGHT);
            return;
        }
        this.addOnPostRenderListener(() -> {
            setupContainer();
            return null;
        });
    }

    private void setupExploitSearchPane() {
        exploitSearchPane.addOnSelectListener((grid) -> {
            String exploitId;
            try {
                exploitId = grid.getFirstSelectedItem().get().getId();
                if (StringUtil.isBlank(exploitId) || exploitId == null) return;
                fillExploitDetailsPane(exploitId);
            } catch (NoSuchElementException | IOException exception) { /* Silence the exceptions*/ }
        });
    }

    private void fillExploitDetailsPane(String exploitId) throws IOException {
        List<BinaryExploit> binaryExploits = BinaryExploitServiceImpl.getInstance().api.findBinaryExploitsFuzzyById(exploitId).execute().body();
        String detailsText = ExploitDetailsManager.getInstance().extractDetailsById(exploitId);
        exploitDetailsPane.setItems(binaryExploits);
        exploitDetailsPane.setDetailsText(detailsText);
        exploitDetailsPane.show();
    }

    private void setupExploitDetailsPane() {
        Layout exploitDetailsPaneLayout = exploitDetailsPane.render();
        exploitDetailsPaneLayout.setSizeFull();
        exploitDetailsPane.setDownloadPresenter(downloadResultPane);
        exploitDetailsPane.hide();
    }

    @Override
    public Layout render() {
        notifyPreRenderListeners();
        if (container == null) {
            this.container = new VerticalLayout();
            Layout exploitSearchPaneLayout = this.exploitSearchPane.render();
            Layout exploitDetailsPaneLayout = this.exploitDetailsPane.render();
            Layout downloadResultPaneLayout = downloadResultPane.render();

            container.addComponents(exploitSearchPaneLayout, exploitDetailsPaneLayout, downloadResultPaneLayout);
            container.setComponentAlignment(exploitSearchPaneLayout, Alignment.MIDDLE_LEFT);
            container.setComponentAlignment(exploitDetailsPaneLayout, Alignment.BOTTOM_RIGHT);
        }
        this.exploitDetailsPane.hide();

        notifyPostRenderListeners();

        return container;
    }

    public void notifyPreRenderListeners() {
        this.preRenderListeneres.parallelStream().forEachOrdered((action) -> {
            try {
                action.call();
            } catch (Exception e) {
                e.printStackTrace();
            }
        });
    }

    public void notifyPostRenderListeners() {
        this.postRenderListeneres.parallelStream().forEachOrdered((action) -> {
            try {
                action.call();
            } catch (Exception e) {
                e.printStackTrace();
            }
        });
    }

    @Override
    public void addOnPreRenderListener(Callable<Void> handler) {
        this.preRenderListeneres.add(handler);
    }

    @Override
    public void addOnPostRenderListener(Callable<Void> handler) {
        this.postRenderListeneres.add(handler);
    }
}
