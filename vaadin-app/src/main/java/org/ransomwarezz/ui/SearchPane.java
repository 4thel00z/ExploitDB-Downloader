package org.ransomwarezz.ui;

import com.vaadin.event.selection.SelectionListener;
import com.vaadin.shared.ui.ValueChangeMode;
import com.vaadin.ui.*;
import com.vaadin.ui.themes.ValoTheme;
import org.ransomwarezz.ui.behaviours.Renderable;
import org.ransomwarezz.ui.behaviours.Setupable;
import org.ransomwarezz.utils.FilterUtils;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.function.Predicate;
import java.util.stream.Collectors;

/**
 * Created by moe on 11/07/17.
 */
public class SearchPane<E> implements Renderable, Setupable {
    private TextField searchBar = new TextField();
    private Grid<E> targetGrid;
    private List<E> items;
    private Label headline = new Label();
    private String width = "100%";

    public SearchPane(String headline, Grid<E> targetGrid, List<E> items) {
        this.targetGrid = targetGrid;
        this.items = items;
        setGridItems(items);
        setHeadline(headline);
        setup();
    }

    private void setHeadline(String headline) {
        this.headline.setValue(headline);
    }

    @Override
    public void setup() {
        setupSearchBar();
        setupHeadline();
    }

    private void setupHeadline() {
        this.headline.setStyleName(ValoTheme.LABEL_H1);
    }

    private void setupSearchBar() {
        searchBar.setPlaceholder("Search");
        searchBar.addValueChangeListener(event -> {
            this.targetGrid.setItems(filter(generateFilter(searchBar.getValue())));
        });
        searchBar.setValueChangeMode(ValueChangeMode.LAZY);
    }

    public void addOnSelectListener(SelectionListener<E> listener) {
        this.targetGrid.addSelectionListener(listener);
    }

    public Layout render() {
        VerticalLayout verticalLayout = new VerticalLayout();

        verticalLayout.setWidth(width);
        this.searchBar.setWidth(width);
        this.targetGrid.setWidth(width);


        verticalLayout.addComponents(this.headline, this.searchBar, this.targetGrid);
        return verticalLayout;
    }


    public void setItems(List<E> items) {
        this.items = items;
    }

    public void setItems(E... items) {
        this.items = Arrays.asList(items);
    }

    public void setGridItems(List<E> items) {
        this.targetGrid.setItems(items);
    }

    public void setGridItems(E... items) {
        this.targetGrid.setItems(items);
    }

    public List<E> filter(Predicate<E> predicate) {
        return this.items.parallelStream().filter(predicate).collect(Collectors.toList());
    }

    private Predicate<E> generateFilter(String filterText) {
        return FilterUtils.generateFilter(filterText);
    }

    public String getWidth() {
        return width;
    }

    public void setWidth(String width) {
        this.width = width;
    }


}
