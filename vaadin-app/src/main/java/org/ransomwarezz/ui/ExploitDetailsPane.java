package org.ransomwarezz.ui;

import com.vaadin.icons.VaadinIcons;
import com.vaadin.shared.ui.ContentMode;
import com.vaadin.ui.*;
import com.vaadin.ui.themes.ValoTheme;
import org.ransomwarezz.entities.BinaryExploit;
import org.ransomwarezz.entities.DownloadResult;
import org.ransomwarezz.managers.BinaryExploitDownloadManager;
import org.ransomwarezz.ui.behaviours.Renderable;
import org.ransomwarezz.ui.presenters.Presenter;

import java.util.List;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Future;
import java.util.stream.Collectors;

import static org.ransomwarezz.utils.Units.PARENT;

/**
 * Created by moe on 12/07/17.
 */
public class ExploitDetailsPane implements Renderable {

    /**
     * UI Elements
     */
    private Layout container;
    private SearchPane<BinaryExploit> binaryExploitSearchPane;
    private Grid<BinaryExploit> binaryExploitGrid;
    private Button downloadButton = new Button();
    //TODO: Add headless scraping for correct details texts
    private Label detailsTextLabel = new Label("", ContentMode.PREFORMATTED);

    /**
     * Collections
     */
    private List<BinaryExploit> binaryExploits;

    /**
     * Presenters
     */
    private Presenter<DownloadResult> downloadPresenter;


    /**
     * Constructors
     */
    public ExploitDetailsPane(String detailsText, List<BinaryExploit> binaryExploits) {
        setup(detailsText, binaryExploits);
    }

    /**
     * Setup methods
     */

    private void setup(String detailsText, List<BinaryExploit> binaryExploits) {
        setupBinaryExploitGrid();
        setupBinaryExploitSearchPane(binaryExploits);
        setupDetailsView(detailsText);
        setupDownloadButton();
    }

    private void setupDownloadButton() {
        downloadButton.setWidth(PARENT);
        downloadButton.setIcon(VaadinIcons.DOWNLOAD);
        downloadButton.setStyleName(ValoTheme.BUTTON_PRIMARY);
        downloadButton.addClickListener(event -> {
            try {
                List<Future<DownloadResult>> download = BinaryExploitDownloadManager.getInstance().download(binaryExploitGrid.getSelectedItems());
                List<DownloadResult> downloadResults = download.parallelStream().map((downloadResultFuture) -> {
                    try {
                        return downloadResultFuture.get();
                    } catch (InterruptedException | ExecutionException e) {
                        e.printStackTrace();
                    }
                    return DownloadResult.getFailedDownloadResult();
                }).collect(Collectors.toList());
                if (downloadPresenter != null) {
                    downloadPresenter.show();
                    downloadPresenter.setItems(downloadResults);
                }
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        });
    }

    private void setupDetailsView(String detailsText) {
        detailsTextLabel.setValue(detailsText);
    }

    private void setupBinaryExploitSearchPane(List<BinaryExploit> binaryExploits) {
        binaryExploitSearchPane = new SearchPane<>("2. Download Payloads", binaryExploitGrid, binaryExploits);
    }

    private void setupBinaryExploitGrid() {
        binaryExploitGrid = new Grid<>(BinaryExploit.class);
        binaryExploitGrid.setSelectionMode(Grid.SelectionMode.MULTI);
    }

    /**
     * Implemented methods
     */

    public Layout render() {
        if (container == null) {
            Layout searchPane = binaryExploitSearchPane.render();
            container = new VerticalLayout();
            container.setWidth(PARENT);
            searchPane.setWidth(PARENT);
            container.addComponents(searchPane, downloadButton);
            ((VerticalLayout) container).setMargin(false);
        }
        return container;
    }

    /**
     * Visibility methods
     */

    public void show() {
        render().setVisible(true);
    }

    public void hide() {
        render().setVisible(false);
    }

    /**
     * Setter section
     */

    public void setDetailsText(String text) {
        detailsTextLabel.setValue(text);
    }

    public void setItems(List<BinaryExploit> items) {
        this.binaryExploitSearchPane.setItems(items);
        this.binaryExploitSearchPane.setGridItems(items);
    }

    public void setDownloadPresenter(Presenter downloadPresenter) {
        this.downloadPresenter = downloadPresenter;
    }

    /**
     * Getter section
     */

    public Presenter getDownloadPresenter() {
        return downloadPresenter;
    }

}
